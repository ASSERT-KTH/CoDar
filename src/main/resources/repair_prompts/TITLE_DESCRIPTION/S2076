OS commands should not be vulnerable to command injection attacks
Why is this an issue?

OS command injections occur when applications build command lines from untrusted data before executing them with a system shell.
In that case, an attacker can tamper with the command line construction and force the execution of unexpected commands. This can lead to the compromise of the underlying operating system.
What is the potential impact?

An attacker exploiting an OS command injection vulnerability will be able to execute arbitrary commands on the underlying operating system.

The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges, and therefore any OS commands or programs may be affected.

Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.
Denial of service and data leaks

In this scenario, the attack aims to disrupt the organization’s activities and profit from data leaks.

An attacker could, for example:

    download the internal server’s data, most likely to sell it
    modify data, send malware
    stop services or exhaust resources (with fork bombs for example)

This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).
Root privilege escalation and pivot

In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate their privileges to an administrative level and attacks other servers.

Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised by a combination of OS injections and misconfiguration of:

    Docker or Kubernetes clusters
    cloud services
    network firewalls and routing
    OS access control

How to fix it in Apache Commons
Code examples

The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can execute an arbitrary program that is installed on the system.
### Noncompliant
{{BUGGY}}
### Compliant

Methods should not perform too many tasks (aka Brain method)
Methods should not perform too many tasks (Brain Method). Why is this an issue? This issue is raised when Sonar considers that a method is a 'Brain Method'. A Brain Method is a method that tends to centralize its owner’s class logic and generally performs too many operations. This can include checking too many conditions, using lots of variables, and ultimately making it difficult to understand, maintain and reuse. It is characterized by high LOC number, high cyclomatic and cognitive complexity, and a large number of variables being used. What is the potential impact? Brain Methods are often hard to cover with tests, because of their deep nesting, and they are error-prone, because of the many local variables they usually introduce. Such methods will be very hard to read and understand for anyone outside who created them, and therefore hard to maintain and fix if bugs get spotted. They also enable code duplication since the method itself can hardly be reused anywhere else. How to fix it The common approach is to identify fragments of the method’s code that deal with a specific responsibility and extract them to a new method. This will make each method more readable, easy to understand and maintain, easier to test, and more prone to be reused. In this paper, the authors describe a systematic procedure to refactor this type of code smell: "Assessing the Refactoring of Brain Methods". Code examples 
### Noncompliant
{{BUGGY}}
### Compliant

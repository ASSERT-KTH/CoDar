Synchronization should not be done on instances of value-based classes
Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Specifically, String literals, and boxed primitives such as Integers should not be used as lock objects because they are pooled and reused. The story is even worse for Boolean objects, because there could possibly be only two instances of Boolean, Boolean.TRUE and Boolean.FALSE and every class that uses a Boolean will be referring to one of the two. Here is the list of types which shouldnâ€™t be used for synchronization: The primitive wrapper classes in java.lang; The class java.lang.Runtime.Version; The "optional" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset, Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; The interface java.lang.ProcessHandle and its implementation classes; The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf, Map.ofEntries, and Map.entry. 
### Noncompliant
{{BUGGY}}
### Compliant

Synchronization should not be done on instances of value-based classes
Why is this an issue? Instances of value-based classes, which are pooled and potentially reused, should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Within the JDK, types which should not be used for synchronization include: String literals Primitive wrapper classes in java.lang (such as Boolean with Boolean.FALSE and Boolean.TRUE) The class java.lang.Runtime.Version The Optional* classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble Various classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset, Duration, Period, Year, YearMonth, and MonthDay Various classes in the java.time.chrono API: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate The interface java.lang.ProcessHandle and its implementation classes The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf, Map.ofEntries, and Map.entry. How to fix it Replace instances of value-based classes with a new object instance to synchronize on. Code examples 
### Noncompliant
{{BUGGY}}
### Compliant

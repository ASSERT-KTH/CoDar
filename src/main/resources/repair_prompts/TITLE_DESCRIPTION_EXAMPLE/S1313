Using hardcoded IP addresses is security-sensitive
Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities: CVE-2006-5901 CVE-2005-3725 Today’s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development, delivery, and deployment: The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. It misleads to use the same address in every environment (dev, sys, qa, prod). Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially sensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to bypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which will increase an attack’s impact. Ask Yourself Whether The disclosed IP address is sensitive, e.g.: Can give information to an attacker about the network topology. It’s a personal (assigned to an identifiable person) IP address. There is a risk if you answered yes to any of these questions. Recommended Secure Coding Practices Don’t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar approach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having to rebuild the software. 
### Noncompliant
String ip = "192.168.12.42"; // Sensitive
Socket socket = new Socket(ip, 6667);
### Compliant
String ip = System.getenv("IP_ADDRESS"); 
Socket socket = new Socket(ip, 6667);
### Noncompliant
{{BUGGY}}
### Compliant

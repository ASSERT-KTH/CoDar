Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks
This vulnerability makes it possible to temporarily execute JavaScript code in the context of the application, granting access to the session of the victim. This is possible because user-provided data, such as URL parameters, are copied into the HTML body of the HTTP response that is sent back to the user. Why is this an issue? Reflected cross-site scripting (XSS) occurs in a web application when the application retrieves data like parameters or headers from an incoming HTTP request and inserts it into its HTTP response without first sanitizing it. The most common cause is the insertion of GET parameters. When well-intentioned users open a link to a page that is vulnerable to reflected XSS, they are exposed to attacks that target their own browser. A user with malicious intent carefully crafts the link beforehand. After creating this link, the attacker must use phishing techniques to ensure that his target users click on the link. What is the potential impact? A well-intentioned user opens a malicious link that injects data into the web application. This data can be text, but it can also be arbitrary code that can be interpreted by the target user’s browser, such as HTML, CSS, or JavaScript. Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability. Vandalism on the front-end website The malicious link defaces the target web application from the perspective of the user who is the victim. This may result in loss of integrity and theft of the benevolent user’s data. Identity spoofing The forged link injects malicious code into the web application. The code enables identity spoofing thanks to cookie theft. Record user activity The forged link injects malicious code into the web application. To leak confidential information, attackers can inject code that records keyboard activity (keylogger) and even requests access to other devices, such as the camera or microphone. Chaining XSS with other vulnerabilities In many cases, bug hunters and attackers chain cross-site scripting vulnerabilities with other vulnerabilities to maximize their impact. For example, an XSS can be used as the first step to exploit more dangerous vulnerabilities or features that require higher privileges, such as a code injection vulnerability in the admin control panel of a web application. How to fix it in JSP Code examples The following code is vulnerable to cross-site scripting because JSP does not auto-escape variables. User input embedded in HTML code should be HTML-encoded to prevent the injection of additional code. This can be done with the OWASP Java Encoder or similar libraries. 
### Noncompliant
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@taglib prefix="e" uri="https://www.owasp.org/index.php/OWASP_Java_Encoder_Project" %>
<!doctype html>
<html>
 <body>
  <h1>${param.title}</h1>    <!-- Noncompliant -->
 </body>
</html>
### Compliant
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@taglib prefix="e" uri="https://www.owasp.org/index.php/OWASP_Java_Encoder_Project" %>
<!doctype html>
<html>
 <body>
  <h1>${e:forHtml(param.title)}</h1>
 </body>
</html>
### Noncompliant
{{BUGGY}}
### Compliant

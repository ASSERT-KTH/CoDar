Using clear-text protocols is security-sensitive
Clear-text protocols such as ftp, telnet, or http lack encryption of transported data, as well as the capability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the transported content. These protocols are not secure as they expose applications to an extensive range of risks: sensitive data exposure traffic redirected to a malicious endpoint malware-infected software update or installer execution of client-side code corruption of critical information Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks involving communications being sniffed or tampered with can still happen. For example, attackers could successfully compromise prior security layers by: bypassing isolation mechanisms compromising a component of the network getting the credentials of an internal IAM account (either from a service account or an actual person) In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network components. By layering various security practices (segmentation and encryption, for example), the application will follow the defense-in-depth principle. Note that using the http protocol is being deprecated by major web browsers. In the past, it has led to the following vulnerabilities: CVE-2019-6169 CVE-2019-12327 CVE-2019-11065 Ask Yourself Whether Application data needs to be protected against falsifications or leaks when transiting over the network. Application data transits over an untrusted network. Compliance rules require the service to encrypt data in transit. Your application renders web pages with a relaxed mixed content policy. OS-level protections against clear-text traffic are deactivated. There is a risk if you answered yes to any of those questions. Recommended Secure Coding Practices Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most common clear-text protocols: Use ssh as an alternative to telnet. Use sftp, scp, or ftps instead of ftp. Use https instead of http. Use SMTP over SSL/TLS or SMTP with STARTTLS instead of clear-text SMTP. Enable encryption of cloud components communications whenever it is possible. Configure your application to block mixed content when rendering web pages. If available, enforce OS-level deactivation of all clear-text traffic. It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire application or system. 
### Noncompliant
TelnetClient telnet = new TelnetClient(); // Sensitive

FTPClient ftpClient = new FTPClient(); // Sensitive

SMTPClient smtpClient = new SMTPClient(); // Sensitive
### Compliant
JSch jsch = new JSch();

if(implicit) {
  // implicit mode is considered deprecated but offer the same security than explicit mode
  FTPSClient ftpsClient = new FTPSClient(true);
}
else {
  FTPSClient ftpsClient = new FTPSClient();
}

if(implicit) {
  // implicit mode is considered deprecated but offer the same security than explicit mode
  SMTPSClient smtpsClient = new SMTPSClient(true);
}
else {
  SMTPSClient smtpsClient = new SMTPSClient();
  smtpsClient.connect("127.0.0.1", 25);
  if (smtpsClient.execTLS()) {
    // commands
  }
}
### Noncompliant
{{BUGGY}}
### Compliant

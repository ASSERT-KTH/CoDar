"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held
Why is this an issue? If Thread.sleep(...) is called when the current thread holds a lock, it could lead to performance and scalability issues, or even worse to deadlocks because the execution of the thread holding the lock is frozen. Itâ€™s better to call wait(...) on the monitor object to temporarily release the lock and allow other threads to run. 
### Noncompliant
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      Thread.sleep(200);
    }
    process();
  }
  ...
}
 
### Compliant
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      monitor.wait(200);
    }
    process();
  }
  ...
}
 Resources CERT, LCK09-J. - Do not perform operations that can block while holding a lock
### Noncompliant
{{BUGGY}}
### Compliant

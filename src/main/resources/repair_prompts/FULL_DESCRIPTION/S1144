Unused "private" methods should be removed
Why is this an issue? private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced. Note that this rule does not take reflection into account, which means that issues will be raised on private methods that are only accessed using the reflection API. 
### Noncompliant
public class Foo implements Serializable
{
  private Foo(){}     
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  
  private void readObject(ObjectInputStream in){...}  
}
 
### Compliant
public class Foo implements Serializable
{
  private Foo(){}     
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  

  private void readObject(ObjectInputStream in){...}  
}
 Exceptions This rule doesnâ€™t raise issues for: annotated methods methods with parameters that are annotated with @javax.enterprise.event.Observes
### Noncompliant
{{BUGGY}}
### Compliant

"Serializable" inner classes of "Serializable" classes should be static
Serializing a non-static inner class will result in an attempt at serializing the outer class as well. If the outer class is actually serializable, then the serialization will succeed but possibly write out far more data than was intended. Making the inner class static (i.e. "nested") avoids this problem, therefore inner classes should be static if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: an inner class can only be instantiated within the context of an instance of the outer class. a nested (static) class can be instantiated independently of the outer class. 
### Noncompliant
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
### Compliant
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
### Noncompliant
{{BUGGY}}
### Compliant
